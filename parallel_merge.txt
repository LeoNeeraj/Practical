#include <iostream>
#include <cstdlib>  // for rand(), srand()
#include <ctime>    // for time()
#include <omp.h>    // for OpenMP
using namespace std;

// Merge function for arrays
void merge(int arr[], int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;
    int left[n1], right[n2];

    // Copy data into temporary arrays
    for (int i = 0; i < n1; ++i)
        left[i] = arr[l + i];
    for (int i = 0; i < n2; ++i)
        right[i] = arr[m + 1 + i];

    int i = 0, j = 0, k = l;
    
    // Merge the temporary arrays back into arr[]
    while (i < n1 && j < n2) {
        if (left[i] <= right[j])
            arr[k++] = left[i++];
        else
            arr[k++] = right[j++];
    }

    // Copy remaining elements of left[], if any
    while (i < n1)
        arr[k++] = left[i++];

    // Copy remaining elements of right[], if any
    while (j < n2)
        arr[k++] = right[j++];
}

// Sequential Merge Sort
void sequentialMergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        sequentialMergeSort(arr, l, m);           // Left half
        sequentialMergeSort(arr, m + 1, r);       // Right half
        merge(arr, l, m, r);                      // Merge the two halves
    }
}

// Parallel Merge Sort
void parallelMergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;

        // Parallel execution of the two halves using OpenMP sections
#pragma omp parallel sections
        {
#pragma omp section
            parallelMergeSort(arr, l, m);    // Left half

#pragma omp section
            parallelMergeSort(arr, m + 1, r); // Right half
        }

        merge(arr, l, m, r); // Merge both halves
    }
}

int main() {
    const int n = 100000; // Adjust size to see clear performance difference
    cout << "Generating " << n << " random numbers...\n";

    int arr[n], arr_copy[n];
    srand(time(0));

    // Generating random numbers
    for (int i = 0; i < n; ++i)
        arr[i] = rand() % 100000;

    // Copy the array for parallel version
    for (int i = 0; i < n; ++i)
        arr_copy[i] = arr[i];

    // Sequential merge sort
    sequentialMergeSort(arr, 0, n - 1);

    // Parallel merge sort
    parallelMergeSort(arr_copy, 0, n - 1);

    // Display the first 10 elements of the sorted array
    cout << "\nFirst 10 elements of sorted array (sequential): ";
    for (int i = 0; i < 10; ++i)
        cout << arr[i] << " ";

    cout << "\nFirst 10 elements of sorted array (parallel): ";
    for (int i = 0; i < 10; ++i)
        cout << arr_copy[i] << " ";
    cout << endl;

    return 0;
}
