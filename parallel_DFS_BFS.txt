#include <iostream>
#include <omp.h>
#include <chrono>
#include <queue>
using namespace std;

const int MAX = 100;
int tree[MAX][MAX];    // Adjacency matrix
int degree[MAX];       // To track number of neighbors
bool visited[MAX];
int nodes;

// Parallel DFS on a tree
void parallelDFS(int v) {
    visited[v] = true;
    cout << v << " ";

    #pragma omp parallel for
    for (int i = 0; i < degree[v]; i++) {
        int child = tree[v][i];
        if (!visited[child]) {
            #pragma omp critical
            {
                if (!visited[child]) {
                    parallelDFS(child);
                }
            }
        }
    }
}

// Parallel BFS on a tree
void parallelBFS(int start) {
    fill(visited, visited + MAX, false);
    queue<int> q;
    visited[start] = true;
    q.push(start);

    while (!q.empty()) {
        int node = q.front();
        q.pop();
        cout << node << " ";

        #pragma omp parallel for
        for (int i = 0; i < degree[node]; i++) {
            int child = tree[node][i];
            if (!visited[child]) {
                #pragma omp critical
                {
                    if (!visited[child]) {
                        visited[child] = true;
                        q.push(child);
                    }
                }
            }
        }
    }
}

int main() {
    int edges;
    cout << "Enter number of nodes in the tree: ";
    cin >> nodes;
    cout << "Enter number of edges (should be nodes - 1): ";
    cin >> edges;

    cout << "Enter the edges (undirected):\n";
    for (int i = 0; i < edges; i++) {
        int u, v;
        cin >> u >> v;
        tree[u][degree[u]++] = v;
        tree[v][degree[v]++] = u;  // Because it's undirected
    }

    // Parallel DFS
    fill(visited, visited + MAX, false);
    cout << "DFS Order: ";
    auto dfsStart = chrono::high_resolution_clock::now();
    parallelDFS(0);
    auto dfsEnd = chrono::high_resolution_clock::now();
    cout << "\nDFS Time: " << chrono::duration<double>(dfsEnd - dfsStart).count() << " seconds\n";

    // Parallel BFS
    cout << "BFS Order: ";
    auto bfsStart = chrono::high_resolution_clock::now();
    parallelBFS(0);
    auto bfsEnd = chrono::high_resolution_clock::now();
    cout << "\nBFS Time: " << chrono::duration<double>(bfsEnd - bfsStart).count() << " seconds\n";

    return 0;
}
